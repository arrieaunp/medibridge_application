import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:medibridge_application/widgets/doc_main_layout.dart';

class DoctorNotificationPage extends StatelessWidget {
  final String doctorId;
  const DoctorNotificationPage({
    Key? key,
    required this.doctorId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text(
            "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
            style: GoogleFonts.prompt(fontWeight: FontWeight.bold),
          ),
          centerTitle: true,
        ),
        body: DocMainLayout(
          selectedIndex: 2,
          doctorId: doctorId,
          child: StreamBuilder<QuerySnapshot>(
            stream: FirebaseFirestore.instance
                .collection('Notifications')
                .where('role', isEqualTo: 'Doctor')
                .where('recipient_id', isEqualTo: doctorId)
                .orderBy('timestamp', descending: true) // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
                .snapshots(),
            builder: (context, snapshot) {
              print('üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î: ${snapshot.data?.docs.length}');

              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              }

              if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                return Center(
                    child: Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                        style: GoogleFonts.prompt(color: Colors.grey)));
              }

              final notifications = snapshot.data!.docs;

              return ListView.builder(
                itemCount: notifications.length,
                itemBuilder: (context, index) {
                  final doc = notifications[index];
                  final notification = doc.data() as Map<String, dynamic>;

                  String formattedTime = notification['timestamp'] != null
                      ? DateFormat('dd/MM/yyyy HH:mm').format(
                          (notification['timestamp'] as Timestamp).toDate())
                      : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤";

                  return Dismissible(
                    key: Key(doc.id), // ‚úÖ ‡πÉ‡∏ä‡πâ Document ID ‡πÄ‡∏õ‡πá‡∏ô Key
                    direction:
                        DismissDirection.endToStart, // ‚úÖ ‡∏õ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤‡πÑ‡∏õ‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö
                    background: Container(
                      color: Colors.red,
                      alignment: Alignment.centerRight,
                      padding: const EdgeInsets.symmetric(horizontal: 20),
                      child: const Icon(Icons.delete,
                          color: Colors.white, size: 32),
                    ),
                    confirmDismiss: (direction) async {
                      bool? shouldDelete = await showDialog(
                        context: context,
                        builder: (BuildContext context) {
                          return AlertDialog(
                            title: Text(
                              '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
                              style: GoogleFonts.prompt(
                                  fontWeight: FontWeight.bold),
                            ),
                            content: Text(
                              '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                              style: GoogleFonts.prompt(),
                            ),
                            actions: [
                              TextButton(
                                onPressed: () =>
                                    Navigator.of(context).pop(false),
                                child:
                                    Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: GoogleFonts.prompt()),
                              ),
                              TextButton(
                                onPressed: () =>
                                    Navigator.of(context).pop(true),
                                child: Text('‡∏•‡∏ö',
                                    style: GoogleFonts.prompt(
                                        color: Colors.red,
                                        fontWeight: FontWeight.bold)),
                              ),
                            ],
                          );
                        },
                      );

                      print(
                          'üóë ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: $shouldDelete'); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°

                      return shouldDelete;
                    },

                    onDismissed: (direction) async {
                      try {
                        print('üóë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${doc.id}');

                        await FirebaseFirestore.instance
                            .collection('Notifications')
                            .doc(doc.id)
                            .delete()
                            .then((_) {
                          print('‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô Firestore');
                        }).catchError((error) {
                          print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö: $error');
                        });

                        // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        final docCheck = await FirebaseFirestore.instance
                            .collection('Notifications')
                            .doc(doc.id)
                            .get();

                        if (docCheck.exists) {
                          print('‚ùå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Firestore! ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                        } else {
                          print('‚úÖ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å Firestore ‡πÅ‡∏•‡πâ‡∏ß!');
                        }

                        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'),
                            duration: Duration(seconds: 2),
                          ),
                        );
                      } catch (e) {
                        print('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö: $e');
                      }
                    },
                    child: Card(
                      elevation: 2,
                      margin: const EdgeInsets.symmetric(
                          vertical: 8, horizontal: 16),
                      child: ListTile(
                        title: Text(
                          notification['title'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠',
                          style: GoogleFonts.prompt(
                              fontWeight: FontWeight.bold,
                              color: const Color(0xFF3B83F6)),
                        ),
                        subtitle: Text(
                          notification['body'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                          style: GoogleFonts.prompt(),
                        ),
                        trailing: Text(
                          formattedTime,
                          style: GoogleFonts.prompt(
                              fontSize: 12, color: Colors.grey),
                        ),
                        onTap: () {
                          print('‡πÅ‡∏ï‡∏∞‡πÇ‡∏ô‡∏ï‡∏¥');
                        },
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ));
  }
}
