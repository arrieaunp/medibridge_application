import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:medibridge_application/widgets/main_layout.dart';

class PatientNotificationPage extends StatefulWidget {
  final String patientId;
  const PatientNotificationPage({Key? key, required this.patientId})
      : super(key: key);

  @override
  _PatientNotificationPageState createState() =>
      _PatientNotificationPageState();
}

class _PatientNotificationPageState extends State<PatientNotificationPage> {
  @override
  void initState() {
    super.initState();
    var currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser != null) {
      debugPrint("‚úÖ [DEBUG] ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: ${currentUser.uid}");
    } else {
      debugPrint("üö´ [DEBUG] ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
    }
  }

  @override
  Widget build(BuildContext context) {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      return const Center(child: Text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"));
    }

    debugPrint("‚úÖ [DEBUG] User Authenticated: ${user.uid}");

    return MainLayout(
        selectedIndex: 3,
        child: Scaffold(
          appBar: AppBar(
            title: Text(
              "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢",
              style: GoogleFonts.prompt(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
          ),
          body: StreamBuilder<QuerySnapshot>(
            stream: FirebaseFirestore.instance
                .collection('Notifications')
                .where('recipient_id', isEqualTo: user.uid)
                .where('role', isEqualTo: 'Patient')
                .orderBy('timestamp', descending: true)
                .snapshots(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return const Center(child: CircularProgressIndicator());
              }

              if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
                return Center(
                  child: Text(
                    "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                    style: GoogleFonts.prompt(
                        fontSize: 16, color: Colors.blueGrey),
                  ),
                );
              }

              final notifications = snapshot.data!.docs;

              return ListView.builder(
                itemCount: notifications.length,
                itemBuilder: (context, index) {
                  final doc = notifications[index];
                  final notification = doc.data() as Map<String, dynamic>;
                  debugPrint("üü° [DEBUG] doc.id ‡∏à‡∏≤‡∏Å Firestore: ${doc.id}");

                  String formattedTime = notification['timestamp'] != null
                      ? DateFormat('dd/MM/yyyy HH:mm').format(
                          (notification['timestamp'] as Timestamp).toDate())
                      : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤";

                  return Dismissible(
                    key: ValueKey(doc.id),
                    direction: DismissDirection.endToStart,
                    background: Container(
                      color: Colors.red,
                      alignment: Alignment.centerRight,
                      padding: const EdgeInsets.symmetric(horizontal: 20),
                      child: const Icon(Icons.delete,
                          color: Colors.white, size: 32),
                    ),
                    confirmDismiss: (direction) async {
                      debugPrint("üîç [DEBUG] confirmDismiss ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å");
                      bool? shouldDelete = await showDialog(
                        context: context,
                        builder: (BuildContext context) {
                          return AlertDialog(
                            title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö'),
                            content: const Text(
                                '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
                            actions: [
                              TextButton(
                                onPressed: () {
                                  print("‚ùå [DEBUG] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
                                  Navigator.of(context).pop(false);
                                },
                                child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                              ),
                              TextButton(
                                onPressed: () {
                                  print("‚úÖ [DEBUG] ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
                                  Navigator.of(context).pop(true);
                                },
                                child: const Text('‡∏•‡∏ö'),
                              ),
                            ],
                          );
                        },
                      );
                      debugPrint(
                          "üü° [DEBUG] ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å confirmDismiss: $shouldDelete");
                      return shouldDelete ?? false;
                    },
                    onDismissed: (direction) async {
                      String docId = doc.id;
                      debugPrint(
                          "üöÄ [DEBUG] ‡∏ñ‡∏∂‡∏á onDismissed ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Document: $docId");

                      try {
                        // üü° 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏î‡πâ)
                        var testRead = await FirebaseFirestore.instance
                            .collection('Notifications')
                            .doc(docId)
                            .get();

                        debugPrint(
                            "üü° [DEBUG] Read Check: ${testRead.exists ? '‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'}");

                        // üü† 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                        await FirebaseFirestore.instance
                            .collection('Notifications')
                            .doc(docId)
                            .delete()
                            .then((_) {
                          debugPrint("‚úÖ [DEBUG] ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $docId");
                        }).catchError((error) {
                          debugPrint(
                              "‚ùå [DEBUG] Firebase Error: ${error.code} - ${error.message}");
                        });
                      } catch (e) {
                        debugPrint("‚ùå [DEBUG] ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Catch Block): $e");
                      }
                    },
                    child: Card(
                      elevation: 2,
                      margin: const EdgeInsets.symmetric(
                          vertical: 8, horizontal: 16),
                      child: ListTile(
                        title: Text(
                          notification['title'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠',
                          style: const TextStyle(fontWeight: FontWeight.bold),
                        ),
                        subtitle: Text(
                          notification['body'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                        ),
                        trailing: Text(
                          formattedTime,
                          style:
                              const TextStyle(fontSize: 12, color: Colors.grey),
                        ),
                      ),
                    ),
                  );
                },
              );
            },
          ),
        ));
  }
}

void testDeleteNotification(String docId) async {
  try {
    print("üü° [DEBUG] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö Document: $docId");
    await FirebaseFirestore.instance
        .collection('Notifications')
        .doc(docId)
        .delete()
        .then((_) {
      print("‚úÖ [DEBUG] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $docId");
    }).catchError((error) {
      print("‚ùå [DEBUG] Firebase Error: ${error.code} - ${error.message}");
    });
  } catch (e) {
    print("‚ùå [DEBUG] ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Catch Block): $e");
  }
}
