import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:http/http.dart' as http;
import 'package:medibridge_application/config.dart';
import 'package:medibridge_application/services/notification_service.dart';

class PaymentController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final ImagePicker _picker = ImagePicker();
  final patientId = FirebaseAuth.instance.currentUser?.uid;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á PromptPay ID ‡∏à‡∏≤‡∏Å Firestore
  Future<String> getPromptPayId() async {
    try {
      DocumentSnapshot doc = await _firestore
          .collection('settings')
          .doc('promptpayID') // ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ settings
          .get();
      return doc['id']; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ PromptPay ID
    } catch (e) {
      throw Exception('Error fetching PromptPay ID: $e');
    }
  }

  Future<List<Map<String, dynamic>>> getPaymentsForPatient(
      String patientId, String statusFilter) async {
    try {
      QuerySnapshot snapshot = await _firestore
          .collection('Appointments')
          .where('patient_id', isEqualTo: patientId)
          .where('status', isEqualTo: statusFilter)
          .get();

      List<Map<String, dynamic>> result = [];

      for (var doc in snapshot.docs) {
        Map<String, dynamic> data = doc.data() as Map<String, dynamic>;

        // ‡∏î‡∏∂‡∏á user_id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å Doctors collection
        DocumentSnapshot doctorSnapshot =
            await _firestore.collection('Doctors').doc(data['doctor_id']).get();
        String userId = doctorSnapshot.get('user_id');

        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å User collection
        DocumentSnapshot userSnapshot =
            await _firestore.collection('User').doc(userId).get();
        String doctorName =
            '${userSnapshot.get('first_name')} ${userSnapshot.get('last_name')}';

        result.add({
          'appointment_id': doc.id,
          'appointment_date': data['appointment_date'],
          'appointment_time': data['appointment_time'],
          'doctor_name': doctorName,
          'amount': data['payment_amount'],
          'status': data['status'],
          'promptPayId': data['promptPayId'], // ‡πÄ‡∏û‡∏¥‡πà‡∏° promptPayId
        });
      }

      return result;
    } catch (e) {
      throw Exception('Error fetching payments for patient: $e');
    }
  }

  //‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ
  Future<void> uploadSlip(BuildContext context, String appointmentId) async {
    try {
      final pickedImage = await _picker.pickImage(source: ImageSource.gallery);
      if (pickedImage == null) return;

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ...')),
      );

      File slipImage = File(pickedImage.path);
      final storageRef =
          _storage.ref().child('payment_slips/$appointmentId.jpg');
      await storageRef.putFile(slipImage);
      final slipUrl = await storageRef.getDownloadURL();

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô Firestore ‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
      await _firestore.collection('Appointments').doc(appointmentId).update({
        'payment_slip_url': slipUrl,
        'payment_status': '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
      });

      // ‚úÖ ‡∏î‡∏∂‡∏á Patient ID ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
      final patientId = FirebaseAuth.instance.currentUser?.uid;
      if (patientId == null)
        throw Exception('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (Patient ID)');

      DocumentSnapshot patientSnapshot =
          await _firestore.collection('User').doc(patientId).get();
      String patientName = patientSnapshot['first_name'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠';

      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Background task (‡πÑ‡∏°‡πà await)
      unawaited(_notifyStaffAboutSlipUploadBackground(
          appointmentId, patientId, patientName, slipUrl));

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô)
      ScaffoldMessenger.of(context).clearSnackBars();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).clearSnackBars();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
      );
      rethrow;
    }
  }

  Future<void> _notifyStaffAboutSlipUploadBackground(String appointmentId,
      String patientId, String patientName, String slipUrl) async {
    try {
      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á Backend ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Notification ‡∏ñ‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà (‡πÑ‡∏°‡πà await)
      unawaited(http.post(
        Uri.parse('${AppConfig.apiUrl}/notify-staff-payment-upload'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'appointment_id': appointmentId,
          'patient_id': patientId,
          'slip_url': slipUrl,
        }),
      ));

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á Staff ‡∏à‡∏≤‡∏Å Firestore (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ó‡∏µ‡πà UI)
      QuerySnapshot staffSnapshot = await _firestore
          .collection('User')
          .where('role', isEqualTo: 'Staff')
          .limit(1)
          .get();

      if (staffSnapshot.docs.isNotEmpty) {
        String staffEmail = staffSnapshot.docs.first['email'];

        String emailSubject = 'üí≥ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
        String emailBody = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà,\n\n'
            '‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ **$patientName** ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß.\n\n'
            'üìé ‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤: [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà]($slipUrl)\n\n'
            '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MediBridge.\n\n'
            '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞\nMediBridge Team';

        unawaited(NotificationService.instance.sendEmailNotification(
          toEmail: staffEmail,
          subject: emailSubject,
          body: emailBody,
        ));

        debugPrint('‚úÖ (Background) ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ Staff ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        debugPrint('‚ùå (Background) ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á Staff ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      }
    } catch (e) {
      debugPrint('‚ùå (Background) Error sending notifications: $e');
    }
  }
}
