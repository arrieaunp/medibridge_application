import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:medibridge_application/config.dart';
import 'package:medibridge_application/services/notification_service.dart';

class DoctorScheduleService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<Map<String, dynamic>>> fetchSchedules(
      String doctorId, DateTime startOfWeek, DateTime endOfWeek) async {
    final List<Map<String, dynamic>> scheduleList = [];

    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Doctors collection
      final doctorDoc = await FirebaseFirestore.instance
          .collection('Doctors')
          .doc(doctorId)
          .get();

      if (!doctorDoc.exists || doctorDoc.data() == null) {
        throw Exception('Doctor data not found');
      }

      final doctorData = doctorDoc.data()!;
      final availableDays = List<String>.from(doctorData['available_days']);
      final availableHours = doctorData['available_hours'];

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
      for (int i = 0; i < 7; i++) {
        final currentDate = startOfWeek.add(Duration(days: i));
        final currentDayName = _getThaiDayName(currentDate.weekday);

        if (availableDays.contains(currentDayName)) {
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï Firestore
          final formattedDate = formatDateToFirestoreString(currentDate);

          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DoctorSchedules
          final scheduleSnapshot = await FirebaseFirestore.instance
              .collection('DoctorSchedules')
              .where('doctor_id', isEqualTo: doctorId)
              .where('date', isEqualTo: formattedDate)
              .get();

          final override = scheduleSnapshot.docs.isNotEmpty
              ? scheduleSnapshot.docs.first.data()
              : null;

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
          scheduleList.add({
            'date': currentDate,
            'start_time': override?['start_time'] ?? availableHours['start'],
            'end_time': override?['end_time'] ?? availableHours['end'],
            'is_override': override != null,
          });
        }
      }
    } catch (e) {
      debugPrint('Error fetching schedules: $e');
    }

    return scheduleList;
  }

  String _getThaiDayName(int weekday) {
    switch (weekday) {
      case DateTime.monday:
        return '‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå';
      case DateTime.tuesday:
        return '‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£';
      case DateTime.wednesday:
        return '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò';
      case DateTime.thursday:
        return '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ';
      case DateTime.friday:
        return '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå';
      case DateTime.saturday:
        return '‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå';
      case DateTime.sunday:
        return '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå';
      default:
        return '';
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DateTime ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏ß/‡∏î/‡∏õ)
  static String formatDate(DateTime date) {
    final thaiDateFormat = DateFormat('d/M/yyyy');
    return thaiDateFormat.format(date);
  }

  String formatDateToFirestoreString(DateTime date) {
    final year = date.year.toString().padLeft(4, '0');
    final month = date.month.toString().padLeft(2, '0');
    final day = date.day.toString().padLeft(2, '0');
    return "$year-$month-${day}T00:00:00.000";
  }

  static String formatThaiDate(DateTime date) {
    final thaiMonthNames = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
      '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
      '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
      '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
      '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
      '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
      '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
      '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
      '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
      '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô',
      '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    final year = date.year; // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡πÉ‡∏´‡πâ +543
    final month = thaiMonthNames[date.month - 1];
    final day = date.day;

    return '$day $month $year';
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "3 February 2025"
  static String formatEnglishDate(DateTime date) {
    final dateFormat = DateFormat('d MMMM yyyy');
    return dateFormat.format(date);
  }

  // üÜï ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Backend)
  Future<void> requestScheduleChange({
    required String doctorId,
    required Map<String, dynamic> schedule,
    required String reason,
  }) async {
    try {
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å Firestore (‡πÉ‡∏ä‡πâ user_id ‡πÅ‡∏ó‡∏ô doctor_id)
      DocumentSnapshot doctorSnapshot =
          await _firestore.collection('User').doc(doctorId).get();

      if (!doctorSnapshot.exists) {
        throw Exception('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÉ‡∏ô Firestore');
      }

      String doctorName =
          "${doctorSnapshot['first_name']} ${doctorSnapshot['last_name']}";

      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö Background (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•)
      unawaited(_notifyStaffScheduleChangeBackground(
        doctorId: doctorId,
        doctorName: doctorName,
        schedule: schedule,
        reason: reason,
      ));

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      debugPrint("‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Background)");
    } catch (e) {
      debugPrint("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠: $e");
    }
  }

  Future<void> _notifyStaffScheduleChangeBackground({
    required String doctorId,
    required String doctorName,
    required Map<String, dynamic> schedule,
    required String reason,
  }) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Firestore
      QuerySnapshot staffSnapshot = await _firestore
          .collection('User')
          .where('role', isEqualTo: 'Staff')
          .limit(1)
          .get();

      if (staffSnapshot.docs.isNotEmpty) {
        String staffEmail = staffSnapshot.docs.first['email'];

        // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö background
        unawaited(NotificationService.instance.sendEmailNotification(
          toEmail: staffEmail,
          subject: 'üìÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå',
          body: '''
‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà,

‡πÅ‡∏û‡∏ó‡∏¢‡πå **$doctorName** ‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£.

- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${_formatDate(schedule['date'])}
- ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${schedule['time']}
- üìå ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: $reason

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö MediBridge.

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞  
‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô MediBridge''',
        ));

        debugPrint("‚úÖ (Background) ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        debugPrint("‚ö†Ô∏è (Background) ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà");
      }

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô FCM ‡πÅ‡∏ö‡∏ö background
      unawaited(http.post(
        Uri.parse('${AppConfig.apiUrl}/notify-schedule-change-request'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'doctor_id': doctorId,
          'schedule_date': (schedule['date'] as DateTime).toIso8601String(),
          'schedule_time': schedule['time'],
          'reason': reason,
        }),
      ));

      debugPrint("‚úÖ (Background) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô FCM ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (e) {
      debugPrint("‚ùå (Background) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e");
    }
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

// üÜï ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£
  Future<void> notifyDoctorScheduleUpdated({
    required String doctorId,
    required DateTime date,
    required String startTime,
    required String endTime,
  }) async {
    try {
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å `User` collection
      DocumentSnapshot doctorSnapshot =
          await _firestore.collection('User').doc(doctorId).get();

      if (!doctorSnapshot.exists) {
        throw Exception('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÉ‡∏ô Firestore');
      }

      String doctorName =
          "${doctorSnapshot['first_name']} ${doctorSnapshot['last_name']}";
      String doctorEmail = doctorSnapshot['email'] ?? '';

      if (doctorEmail.isEmpty) {
        throw Exception('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå');
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      String emailSubject = 'üìÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á';
      String emailBody = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì $doctorName,\n\n'
          '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MediBridge.\n\n'
          '- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${_formatDate(date)}\n'
          '- ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: $startTime - $endTime\n\n'
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MediBridge.\n\n'
          '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞\n‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô MediBridge';

      // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå
      await NotificationService.instance.sendEmailNotification(
        toEmail: doctorEmail,
        subject: emailSubject,
        body: emailBody,
      );

      debugPrint("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô FCM
      final response = await http.post(
        Uri.parse('${AppConfig.apiUrl}/notify-doctor-schedule-updated'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'doctor_id': doctorId,
          'schedule_date': date.toIso8601String(),
          'start_time': startTime,
          'end_time': endTime,
        }),
      );

      if (response.statusCode == 200) {
        debugPrint("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡πà‡∏≤‡∏ô FCM ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        debugPrint(
            "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ú‡πà‡∏≤‡∏ô FCM ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode} - ${response.body}");
      }
    } catch (e) {
      debugPrint("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå: $e");
    }
  }
}
