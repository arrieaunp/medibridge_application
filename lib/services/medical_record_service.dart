import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:intl/intl.dart';
import 'package:medibridge_application/models/medical_record_model.dart';

class MedicalRecordService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
  Future<List<Map<String, dynamic>>> fetchPatientsList(String doctorId) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≠‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ß‡∏±‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
      QuerySnapshot appointmentsSnapshot = await _firestore
          .collection('Appointments')
          .where('doctor_id', isEqualTo: doctorId)
          .get();

      print(
          "üî• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Appointment ‡πÑ‡∏î‡πâ: ${appointmentsSnapshot.docs.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");

      Set<String> patientIds = {};
      for (var doc in appointmentsSnapshot.docs) {
        String? patientId = doc['patient_id'];
        if (patientId != null && patientId.isNotEmpty) {
          patientIds.add(patientId);
        }
      }

      print("‚úÖ patient_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô: ${patientIds.length} ‡∏Ñ‡∏ô");

      List<Map<String, dynamic>> patientsList = [];

      for (String patientId in patientIds) {
        DocumentSnapshot patientSnapshot =
            await _firestore.collection('Patients').doc(patientId).get();

        if (!patientSnapshot.exists) {
          print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Patients ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö patient_id: $patientId");
          continue;
        }

        String userId = patientSnapshot['user_id'] ?? '';
        if (userId.isEmpty) {
          print("‚ö†Ô∏è user_id ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö patient_id: $patientId");
          continue;
        }

        DocumentSnapshot userSnapshot =
            await _firestore.collection('User').doc(userId).get();

        if (!userSnapshot.exists) {
          print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_id: $userId");
          continue;
        }

        Map<String, dynamic>? userData =
            userSnapshot.data() as Map<String, dynamic>?;
        String firstName = userData?['first_name'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        String lastName = userData?['last_name'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        String fullName = "$firstName $lastName";

        Map<String, dynamic>? patientData =
            patientSnapshot.data() as Map<String, dynamic>?;

        DateTime? birthDate;
        int age = 0;
        if (patientData != null && patientData.containsKey('date_of_birth')) {
          try {
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "08 April 2003" ‡πÄ‡∏õ‡πá‡∏ô DateTime ‡∏î‡πâ‡∏ß‡∏¢ DateFormat
            birthDate =
                DateFormat("dd MMMM yyyy").parse(patientData['date_of_birth']);
            age = DateTime.now().year - birthDate.year;
          } catch (e) {
            print(
                "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á birthdate: ${patientData['date_of_birth']} - Error: $e");
          }
        } else {
          print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö birthdate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö patient_id: $patientId");
        }

        print("üéâ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: $fullName ‡∏≠‡∏≤‡∏¢‡∏∏: $age ‡∏õ‡∏µ");

        patientsList.add({
          'patient_id': patientId,
          'full_name': fullName,
          'age': age,
          'gender': patientSnapshot['gender'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        });
      }

      print("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${patientsList.length} ‡∏Ñ‡∏ô");
      return patientsList;
    } catch (e) {
      print('‚ùå Error fetching patients list: $e');
      return [];
    }
  }

  /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
  Future<List<Map<String, dynamic>>> fetchPatientAppointments(
      String patientId, String doctorId) async {
    try {
      print("Debug: patientId = $patientId, doctorId = $doctorId");
      Query appointmentsQuery = _firestore
          .collection('Appointments')
          .where('patient_id', isEqualTo: patientId)
          .where('doctor_id', isEqualTo: doctorId)
          .where('appointment_date', isLessThan: Timestamp.now())
          .orderBy('appointment_date', descending: true);

      QuerySnapshot appointmentsSnapshot = await appointmentsQuery.get();
      print(
          "Debug: Appointment snapshot count: ${appointmentsSnapshot.docs.length}");

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏î ‡πÜ ‡πÅ‡∏™‡∏î‡∏á warning
      if (appointmentsSnapshot.docs.isEmpty) {
        print("Warning: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Appointment ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ");
      }

      List<Map<String, dynamic>> appointmentList = [];
      for (var doc in appointmentsSnapshot.docs) {
        Map<String, dynamic> appointmentData =
            doc.data() as Map<String, dynamic>;
        String appointmentId = doc.id;

        // Debug log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ appointment
        print("Debug: Appointment Data: $appointmentData");

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MedicalRecords
        QuerySnapshot<Map<String, dynamic>> medicalRecordSnapshot =
            await _firestore
                .collection('MedicalRecords')
                .where('appointment_id', isEqualTo: appointmentId)
                .limit(1)
                .get();

        String diagnosis = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
        if (medicalRecordSnapshot.docs.isNotEmpty) {
          Map<String, dynamic> medicalData =
              medicalRecordSnapshot.docs.first.data();
          if (medicalData.containsKey('diagnosis')) {
            diagnosis = medicalData['diagnosis'];
          }
        } else {
          print(
              "Debug: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MedicalRecords ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö appointment_id: $appointmentId");
        }

        String appointmentDateStr = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        if (appointmentData.containsKey('appointment_date')) {
          try {
            appointmentDateStr = appointmentData['appointment_date']
                .toDate()
                .toString()
                .split(' ')[0];
          } catch (e) {
            print(
                "Error converting appointment_date for appointment_id: $appointmentId - Error: $e");
          }
        } else {
          print(
              "Warning: ‡πÑ‡∏°‡πà‡∏°‡∏µ field appointment_date ‡πÉ‡∏ô appointment_id: $appointmentId");
        }

        appointmentList.add({
          'appointment_id': appointmentId,
          'date': appointmentDateStr,
          'diagnosis': diagnosis,
        });
      }

      print("Debug: Returning ${appointmentList.length} appointments");
      return appointmentList;
    } catch (e) {
      print('‚ùå Error fetching patient appointments: $e');
      return [];
    }
  }

  /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Medical Record ‡∏à‡∏≤‡∏Å Firestore
  Future<MedicalRecordModel?> fetchMedicalRecord(String appointmentId) async {
    try {
      QuerySnapshot medicalRecordSnapshot = await _firestore
          .collection('MedicalRecords')
          .where('appointment_id', isEqualTo: appointmentId)
          .limit(1)
          .get();

      if (medicalRecordSnapshot.docs.isEmpty) {
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Medical Record ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö appointmentId: $appointmentId");
        return null; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }

      return MedicalRecordModel.fromFirestore(medicalRecordSnapshot.docs.first);
    } catch (e) {
      print("‚ùå Error fetching medical record: $e");
      return null;
    }
  }

  /// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Medical Record
  Future<void> updateMedicalRecord(
      String appointmentId, MedicalRecordModel record) async {
    try {
      DocumentReference recordRef =
          _firestore.collection('MedicalRecords').doc(appointmentId);
      await recordRef.set(record.toFirestore(), SetOptions(merge: true));
      print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MedicalRecord ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (e) {
      print("‚ùå Error updating MedicalRecord: $e");
    }
  }

  Future<Map<String, dynamic>> fetchPatientInfo(String patientId) async {
    try {
      DocumentSnapshot patientSnapshot =
          await _firestore.collection('Patients').doc(patientId).get();
      if (!patientSnapshot.exists) {
        throw Exception("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ patientId: $patientId");
      }

      String userId = patientSnapshot['user_id'] ?? '';
      if (userId.isEmpty) {
        throw Exception("‚ùå user_id ‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö patientId: $patientId");
      }

      DocumentSnapshot userSnapshot =
          await _firestore.collection('User').doc(userId).get();
      if (!userSnapshot.exists) {
        throw Exception("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ user_id: $userId");
      }

      // --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î age ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ null ---
      int age = 0;
      String? dobString =
          patientSnapshot.data().toString().contains('date_of_birth')
              ? patientSnapshot['date_of_birth']
              : null;

      if (dobString != null && dobString.trim().isNotEmpty) {
        // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "08 April 2003"
        // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ try-catch ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô parse error
        try {
          List<String> parts = dobString.split(' ');
          if (parts.length == 3) {
            // ‡πÄ‡∏ä‡πà‡∏ô ["08", "April", "2003"]
            int birthYear = int.parse(parts[2]);
            age = DateTime.now().year - birthYear;
          }
        } catch (e) {
          print("‚ö†Ô∏è ‡πÅ‡∏õ‡∏•‡∏á date_of_birth ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: $dobString => set age = 0");
          age = 0;
        }
      }

      return {
        'full_name':
            '${userSnapshot['first_name']} ${userSnapshot['last_name']}',
        'first_name': '${userSnapshot['first_name']}',
        'last_name': '${userSnapshot['last_name']}',
        'age': age, // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0
        'gender': patientSnapshot['gender'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        'allergies': patientSnapshot['allergies'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        'chronic_conditions':
            patientSnapshot['chronic_conditions'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      };
    } catch (e) {
      print("‚ùå Error fetching patient info: $e");
      return {
        'first_name': '',
        'last_name': '',
        'age': '',
        'gender': '',
        'allergies': '',
        'chronic_conditions': ''
      };
    }
  }

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Map<String, dynamic>>> getMedicalHistory() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return [];

    String patientId = user.uid;

    QuerySnapshot appointmentsSnapshot = await _firestore
        .collection('Appointments')
        .where('patient_id', isEqualTo: patientId)
        .orderBy('appointment_date', descending: true)
        .get();

    List<Map<String, dynamic>> medicalHistory = [];

    for (var appointmentDoc in appointmentsSnapshot.docs) {
      var appointmentData = appointmentDoc.data() as Map<String, dynamic>;
      String appointmentId = appointmentData['appointment_id'] ?? '';
      String doctorId = appointmentData['doctor_id'] ?? '';

      if (doctorId.isEmpty || appointmentId.isEmpty) {
        print(
            "‚ùå ‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á: appointmentId = $appointmentId, doctorId = $doctorId");
        continue;
      }

      Map<String, String> doctorInfo = await getDoctorInfo(doctorId);
      String doctorName = doctorInfo['name'] ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå';
      String doctorProfilePic = doctorInfo['profile_pic'] ?? '';

      DocumentSnapshot medicalRecordDoc = await _firestore
          .collection('MedicalRecords')
          .doc(appointmentId)
          .get();

      if (medicalRecordDoc.exists) {
        var medicalData = medicalRecordDoc.data() as Map<String, dynamic>;

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ appointment_date ‡πÄ‡∏õ‡πá‡∏ô Timestamp ‡∏´‡∏£‡∏∑‡∏≠ String
        var appointmentDate = appointmentData['appointment_date'];
        if (appointmentDate is Timestamp) {
          appointmentDate = appointmentDate.toDate();
        }

        medicalHistory.add({
          'appointment_id': appointmentId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° appointment_id
          'patient_id': patientId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° patient_id
          'doctor_id': doctorId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° doctor_id
          'appointment_date': appointmentDate, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Timestamp
          'doctor_name': doctorName,
          'doctor_profile_pic': doctorProfilePic,
          'diagnosis': medicalData['diagnosis'],
          'treatment': medicalData['treatment'],
          'prescription': medicalData['prescription'],
        });
      }
    }

    return medicalHistory;
  }

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  Future<List<Map<String, dynamic>>> getMedicalHistoryByDate(
      DateTime? selectedDate) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return [];

    String patientId = user.uid;
    Query query = _firestore
        .collection('Appointments')
        .where('patient_id', isEqualTo: patientId);

    if (selectedDate != null) {
      Timestamp startOfDay = Timestamp.fromDate(DateTime(
          selectedDate.year, selectedDate.month, selectedDate.day, 0, 0, 0));
      Timestamp endOfDay = Timestamp.fromDate(DateTime(
          selectedDate.year, selectedDate.month, selectedDate.day, 23, 59, 59));

      query = query
          .where('appointment_date', isGreaterThanOrEqualTo: startOfDay)
          .where('appointment_date', isLessThanOrEqualTo: endOfDay);
    } else {
      query = query.orderBy('appointment_date', descending: true).limit(5);
    }

    QuerySnapshot appointmentsSnapshot = await query.get();
    List<Map<String, dynamic>> medicalHistory = [];

    for (var appointmentDoc in appointmentsSnapshot.docs) {
      var appointmentData = appointmentDoc.data() as Map<String, dynamic>;
      String appointmentId = appointmentData['appointment_id'];
      String doctorId = appointmentData['doctor_id'] ?? '';

      if (doctorId.isEmpty) continue;

      Map<String, String> doctorInfo = await getDoctorInfo(doctorId);
      String doctorName = doctorInfo['name'] ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå';
      String doctorProfilePic = doctorInfo['profile_pic'] ?? '';

      DocumentSnapshot medicalRecordDoc = await _firestore
          .collection('MedicalRecords')
          .doc(appointmentId)
          .get();

      if (medicalRecordDoc.exists) {
        var medicalData = medicalRecordDoc.data() as Map<String, dynamic>;
        medicalHistory.add({
          'appointment_id': appointmentId,
          'patient_id': patientId,
          'doctor_id': doctorId,
          'appointment_date':
              appointmentData['appointment_date'], // ‚úÖ ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô Timestamp
          'doctor_name': doctorName,
          'doctor_profile_pic': doctorProfilePic,
          'diagnosis': medicalData['diagnosis'],
          'treatment': medicalData['treatment'],
          'prescription': medicalData['prescription'],
        });
      }
    }

    return medicalHistory;
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡∏ä‡∏∑‡πà‡∏≠ + ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå)
  Future<Map<String, String>> getDoctorInfo(String doctorId) async {
    DocumentSnapshot doctorDoc =
        await _firestore.collection('Doctors').doc(doctorId).get();

    if (doctorDoc.exists && doctorDoc.data() != null) {
      var doctorData = doctorDoc.data() as Map<String, dynamic>;
      String userId = doctorData['user_id'] ?? '';

      if (userId.isNotEmpty) {
        DocumentSnapshot userDoc =
            await _firestore.collection('User').doc(userId).get();

        if (userDoc.exists && userDoc.data() != null) {
          var userData = userDoc.data() as Map<String, dynamic>;
          return {
            'name': "${userData['first_name']} ${userData['last_name']}",
            'profile_pic': userData['profile_pic'] ?? '',
          };
        }
      }
    }

    return {'name': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå', 'profile_pic': ''};
  }
}
