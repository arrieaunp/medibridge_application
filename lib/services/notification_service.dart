import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart' hide Message;
import 'package:mailer/mailer.dart';
import 'package:mailer/smtp_server/gmail.dart';
import 'package:medibridge_application/main.dart';

@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await NotificationService.instance.setupFlutterNotification();
  await NotificationService.instance.showNotification(message);
}

class NotificationService {
  NotificationService._();
  static final NotificationService instance = NotificationService._();
  factory NotificationService() => instance;

  final _messaging = FirebaseMessaging.instance;
  final _localNotifications = FlutterLocalNotificationsPlugin();
  bool _isFlutterLocalNotificationsInitialized = false;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  final String baseUrl = 'http://172.20.10.2:5001';

  Future<void> initialize(BuildContext context) async {
    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
    await _requestPermission();
    await _setupMessageHandlers(context);

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏ì‡∏∞‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üöÄ [onMessage] Notification: ${message.notification?.title}');
      print('üì© [onMessage] Body: ${message.notification?.body}');

      showNotification(message);
    });

    // Get FCM token
    final token = await FirebaseMessaging.instance.getToken();
    if (token != null) {
      debugPrint('FCM Token: $token');
      await sendTokenToBackend(token);
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° listener ‡∏Ç‡∏ì‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      debugPrint(
          'üö® [onMessage] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message.notification?.title}');
      debugPrint('üí¨ [onMessage] Body: ${message.notification?.body}');
      debugPrint('üóÇÔ∏è [onMessage] Data: ${message.data}');
      showNotification(message);
    });

    FirebaseMessaging.onBackgroundMessage((RemoteMessage message) async {
      debugPrint(
          'üö® [onBackgroundMessage] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message.notification?.title}');
      debugPrint(
          'üí¨ [onBackgroundMessage] Body: ${message.notification?.body}');
      debugPrint('üóÇÔ∏è [onBackgroundMessage] Data: ${message.data}');
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      debugPrint(
          'üöÄ [onMessageOpenedApp] ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${message.notification?.title}');
      debugPrint('üí¨ [onMessageOpenedApp] Body: ${message.notification?.body}');
      debugPrint('üóÇÔ∏è [onMessageOpenedApp] Data: ${message.data}');
    });
  }

  Future<void> _requestPermission() async {
    final settings = await _messaging.requestPermission(
      alert: true,
      badge: true,
      sound: true,
      provisional: false,
      announcement: false,
      carPlay: false,
      criticalAlert: false,
    );
    print('Permission status: ${settings.authorizationStatus}');
  }

  Future<void> setupFlutterNotification() async {
    if (_isFlutterLocalNotificationsInitialized) {
      return;
    }

    // android setup
    const channel = AndroidNotificationChannel(
      'high_importance_channel',
      'High Importance Notification',
      description: 'used foe importance noti',
      importance: Importance.max,
    );

    await _localNotifications
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);

    const initializtionSettingAndroid =
        AndroidInitializationSettings('@mipmap/ic_lancher');

    final initializationSettings = const InitializationSettings(
      android: initializtionSettingAndroid,
    );

    //flutter nofi setup
    await _localNotifications.initialize(
      initializationSettings,
      onDidReceiveBackgroundNotificationResponse: (details) {},
    );
    _isFlutterLocalNotificationsInitialized = true;
  }

  Future<void> showNotification(RemoteMessage message) async {
    debugPrint('üì≤ [showNotification] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô...');
    debugPrint('üìù Title: ${message.notification?.title}');
    debugPrint('üìù Body: ${message.notification?.body}');
    debugPrint('üì¶ Data: ${message.data}');

    RemoteNotification? notification = message.notification;
    AndroidNotification? android = message.notification?.android;

    if (notification == null) {
      debugPrint('‚ö†Ô∏è [showNotification] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification ‡∏à‡∏≤‡∏Å FCM');
    }

    if (notification != null && android != null) {
      debugPrint('‚úÖ [showNotification] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å _localNotifications.show()');
      await _localNotifications.show(
        notification.hashCode,
        notification.title,
        notification.body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            'high_importance_channel',
            'High Importance Notifications',
            channelDescription: '‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
            importance: Importance.high,
            priority: Priority.high,
            styleInformation: BigTextStyleInformation(notification.body ?? ''),
            icon: '@mipmap/ic_launcher',
          ),
        ),
        payload: jsonEncode(message.data),
      );
    } else {
      debugPrint('‚ö†Ô∏è [showNotification] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ');
    }
  }

  Future<void> _setupMessageHandlers(BuildContext context) async {
    FirebaseMessaging.onMessage.listen((message) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ staff_notification ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (ModalRoute.of(context)?.settings.name == '/staff_notification') {
        // ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ staff_notification ‡πÉ‡∏´‡πâ refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content:
                  Text('‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà: ${message.notification?.title}')),
        );
        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ State Management ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ staff_notification
      } else {
        // ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤ staff_notification ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥

        showNotification(message);
      }
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (background ‡∏´‡∏£‡∏∑‡∏≠ terminated state)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      if (message.data.containsKey('appointment_id')) {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
        FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
          if (navigatorKey.currentState != null) {
            navigatorKey.currentState!.pushNamed('/appointmentManagement');
          }
        });
      }
    });

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    final initialMessage = await _messaging.getInitialMessage();
    if (initialMessage != null) {
      _handleBackgroundMessage(initialMessage, context);
    }
  }

  Future<void> sendTokenToBackend(String token) async {
    final url = Uri.parse('https://your-backend-api.com/save-fcm-token');
    final response = await http.post(
      url,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'fcm_token': token}),
    );

    if (response.statusCode == 200) {
      debugPrint('FCM token sent successfully');
    } else {
      debugPrint('Failed to send FCM token');
    }
  }

  void _handleBackgroundMessage(RemoteMessage message, BuildContext context) {
    final data = message.data;

    if (data.containsKey('appointment_id')) {
      final appointmentId = data['appointment_id'];
      // ‡πÉ‡∏ä‡πâ Navigator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
      Navigator.pushNamed(context, '/appointmentManagement',
          arguments: {'appointmentId': appointmentId});
    }
  }

  Future<void> sendNewAppointmentNotification(String appointmentId,
      DateTime? appointmentDate, String? appointmentTime) async {
    try {
      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
      String formattedDate = appointmentDate != null
          ? _formatDate(appointmentDate)
          : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
      String formattedTime = appointmentTime ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤';

      debugPrint(
          'üìÖ Sending notification: Date=$formattedDate, Time=$formattedTime');

      final url =
          Uri.parse('http://172.20.10.2:5001/new-appointment-notification');

      final payload = jsonEncode({
        'appointment_id': appointmentId,
        'title': 'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà',
        'body':
            '‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà $formattedDate ‡πÄ‡∏ß‡∏•‡∏≤ $formattedTime ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
      });

      debugPrint('üì° Payload: $payload');

      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: payload,
      );

      if (response.statusCode == 200) {
        debugPrint("‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${response.body}");
      } else {
        debugPrint(
            "‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode} -> ${response.body}");
      }
    } catch (e) {
      debugPrint('‚ùå Error sending notification to staff: $e');
    }
  }

  String _formatDate(DateTime? date) {
    if (date == null) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
    try {
      final formatted = '${date.day}/${date.month}/${date.year}';
      debugPrint('üìÜ Formatted date: $formatted');
      return formatted;
    } catch (e) {
      debugPrint('‚ùå Error formatting date: $e');
      return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
    }
  }

// üîî ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ due_date)
Future<void> sendPaymentDueNotificationToPatient({
  required String patientId,
  required double amount,
}) async {
  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á **‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢** ‡∏à‡∏≤‡∏Å Firestore
    DocumentSnapshot patientSnapshot =
        await _firestore.collection('User').doc(patientId).get();

    if (!patientSnapshot.exists) {
      throw Exception('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏ô Firestore');
    }

    String patientEmail = patientSnapshot['email'];
    String patientName = patientSnapshot['first_name'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';

    // ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Firebase Cloud Messaging (FCM)**
    String fcmMessage =
        "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô $amount ‡∏ö‡∏≤‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î";

    // üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase Cloud Messaging
    final payload = jsonEncode({
      'patient_id': patientId,
      'amount': amount,
      'title': 'üí≥ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
      'body': fcmMessage,
    });

    // üåê **‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô FCM**
    final response = await http.post(
      Uri.parse('$baseUrl/payment-due-notification'),
      headers: {'Content-Type': 'application/json'},
      body: payload,
    );

    if (response.statusCode == 200) {
      debugPrint('‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else {
      debugPrint(
          '‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.statusCode} -> ${response.body}');
    }

    // ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢**
    String emailSubject = 'üí≥ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•';
    String emailBody =
        '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì $patientName,\n\n'
        '‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô **$amount ‡∏ö‡∏≤‡∏ó** ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞.\n\n'
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MediBridge ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ.\n\n'
        '‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á.\n\n'
        '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ MediBridge\n'
        '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô MediBridge';

    // ‚úÖ **‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢**
    await NotificationService.instance.sendEmailNotification(
      toEmail: patientEmail,
      subject: emailSubject,
      body: emailBody,
    );

    debugPrint('‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (e) {
    debugPrint('‚ùå Error sending payment due notification: $e');
  }
}

    Future<void> sendEmailNotification({
    required String toEmail,
    required String subject,
    required String body,
  }) async {
    final String username = dotenv.env['EMAIL_USERNAME']!;
    final String password = dotenv.env['EMAIL_PASSWORD']!;

    final smtpServer = gmail(username, password); // ‡πÉ‡∏ä‡πâ Gmail SMTP Server

    final message = Message()
      ..from = Address(username, 'MediBridge')
      ..recipients.add(toEmail)
      ..subject = subject
      ..text = body;

    try {
      final sendReport = await send(message, smtpServer);
      print('‚úÖ Email sent: ${sendReport.toString()}');
    } catch (e) {
      print('‚ùå Error sending email: $e');
    }
  }

}
