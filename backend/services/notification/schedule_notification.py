from datetime import datetime
from services.notification.notification_service import NotificationService

class ScheduleNotification:
    def __init__(self, db, service_account_file):
        self.db = db
        self.notification_service = NotificationService(db, service_account_file)

    def notify_staff_about_schedule_change_request(self, doctor_id, schedule_date, schedule_time, reason):
        """üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£"""
        try:
            # ‚úÖ 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å User collection
            doctor_doc = self.db.collection('User').document(doctor_id).get()
            if not doctor_doc.exists:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö doctor_id: {doctor_id}")
                doctor_name = f"‡πÅ‡∏û‡∏ó‡∏¢‡πå (‡∏£‡∏´‡∏±‡∏™: {doctor_id})"
            else:
                doctor_data = doctor_doc.to_dict()
                first_name = doctor_data.get('first_name', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠')
                last_name = doctor_data.get('last_name', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•')
                doctor_name = f"‡πÅ‡∏û‡∏ó‡∏¢‡πå {first_name} {last_name}"

            # ‚úÖ 2. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            if isinstance(schedule_date, datetime):  # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                formatted_date = schedule_date.strftime('%d %B %Y')  # ‚úÖ ‡πÄ‡∏ä‡πà‡∏ô "17 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2025"
            else:
                formatted_date = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'

            formatted_time = schedule_time if schedule_time else "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤"

            # ‚úÖ 3. ‡∏î‡∏∂‡∏á FCM Tokens ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
            staff_docs = self.db.collection('User').where('role', '==', 'Staff').stream()
            tokens = []
            for doc in staff_docs:
                user_data = doc.to_dict()
                tokens.extend(user_data.get('fcm_token', []))

            if not tokens:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ FCM token ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")
                return False

            # ‚úÖ 4. ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå
            title = "üìÖ ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£"
            body = (
                f"{doctor_name} ‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ "
                f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formatted_date} ‡πÄ‡∏ß‡∏•‡∏≤ {formatted_time} "
                f"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {reason}"
            )

            # ‚úÖ 5. ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô FCM
            self.notification_service.send_fcm_notification(
                tokens,
                title,
                body,
                {
                    "type": "SCHEDULE_CHANGE_REQUEST",
                    "doctor_name": doctor_name,
                    "schedule_date": formatted_date,
                    "schedule_time": formatted_time,
                },
                role="Staff",
                recipient_id="all_staff"
            )

            print("‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True

        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {e}")
            return False

    def notify_doctor_about_request_submission(self, doctor_id, schedule_date, schedule_time):
        """üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            # ‚úÖ 1. ‡∏î‡∏∂‡∏á FCM Token ‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå
            doctor_doc = self.db.collection('User').document(doctor_id).get()
            if not doctor_doc.exists:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö doctor_id: {doctor_id}")
                return False

            doctor_data = doctor_doc.to_dict()
            tokens = doctor_data.get('fcm_token', [])

            if not tokens:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ FCM token ‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå {doctor_id}")
                return False

            # ‚úÖ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            title = "üì® ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß"
            body = (
                f"‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à "
                f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {schedule_date} ‡πÄ‡∏ß‡∏•‡∏≤ {schedule_time} "
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"
            )

            # ‚úÖ 3. ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô FCM
            self.notification_service.send_fcm_notification(
                tokens,
                title,
                body,
                {
                    "type": "SCHEDULE_REQUEST_SUBMITTED",
                    "schedule_date": schedule_date,
                    "schedule_time": schedule_time,
                    "status": "pending"
                },
                role="Doctor",
                recipient_id=doctor_id
            )

            # # ‚úÖ 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore (Notifications Collection)
            # self.db.collection("Notifications").add({
            #     "recipient_id": doctor_id,
            #     "role": "Doctor",
            #     "title": title,
            #     "body": body,
            #     "timestamp": datetime.now(),
            #     "type": "SCHEDULE_REQUEST_SUBMITTED",
            #     "status": "sent"
            # })

            print(f"‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå {doctor_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True

        except Exception as e:
            print(f"‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return False
